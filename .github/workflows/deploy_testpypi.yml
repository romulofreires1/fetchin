name: Deploy to TestPyPI

on:
  workflow_run:
    workflows: ["Quality Checks"]
    types:
      - completed

jobs:
  deploy_testpypi:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install build and twine
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install build twine

      - name: Update version for TestPyPI
        run: |
          # Get the current version from pyproject.toml
          current_version=$(grep 'version = ' pyproject.toml | cut -d '"' -f2)
          # Generate a random suffix (timestamp or random number)
          random_suffix=$(date +%s)  # You can also use $RANDOM for a random number
          # Update the version with the random suffix
          new_version="${current_version}-test.${random_suffix}"
          # Escape the version for sed
          escaped_current_version=$(printf '%s\n' "$current_version" | sed 's/[]\/$*.^|[]/\\&/g')
          escaped_new_version=$(printf '%s\n' "$new_version" | sed 's/[]\/$*.^|[]/\\&/g')
          # Replace the version in pyproject.toml using | as the delimiter
          sed -i "s|version = \"$escaped_current_version\"|version = \"$escaped_new_version\"|" pyproject.toml
          echo "New version for TestPyPI: $new_version"

      - name: Build package
        run: |
          source venv/bin/activate
          python -m build

      - name: Publish to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          source venv/bin/activate
          twine upload --repository-url https://test.pypi.org/legacy/ dist/*
